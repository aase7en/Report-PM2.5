/** ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö */ 
const CONFIG = {
  SPREADSHEET_ID: "1kBUKdezfAxIziq167e-RJV1nNZkeiaz6YQcpVAMja9w",
  LINE_TOKEN: [
      'DVDfc5aTttR3eUCG1pJCKj0ANO2ZDrOqPeZXqKvL6AI',// Direct
      '5mYp38Vlqd8KiYNkNZPFjjT43mv5SleerZ8Dko6pkDQ'// ‡∏≠‡∏™‡∏°
  ],
  API_ENDPOINTS: {
    THAI_AIR: "http://air4thai.pcd.go.th/services/getNewAQI_JSON.php?stationID=21t",
    GLOBAL_AIR: "https://api.waqi.info/feed/A419398/?token=a5dec343b1b32382758bf6f2d07c3f4af6238ebc"
  },
  PM25_LEVELS: {
    VERY_GOOD: { min: 0, max: 25, color: '#00E400' },
    GOOD: { min: 26, max: 37, color: '#FFFF00' },
    MODERATE: { min: 38, max: 50, color: '#FF7E00' },
    UNHEALTHY_SENSITIVE: { min: 51, max: 90, color: '#FF0000' },
    UNHEALTHY: { min: 91, max: Infinity, color: '#8F3F97' }
  }
};

/** ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Errors */
class AirQualityError extends Error {
  constructor(message, type) {
    super(message);
    this.name = 'AirQualityError';
    this.type = type;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏° HTML templates
function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/** ‡πÄ‡∏û‡∏¥‡πà‡∏° retry mechanism */
function fetchWithRetry(url, options = {}, maxRetries = 3) {
  for (let i = 0; i < maxRetries; i++) {
    try {
      return UrlFetchApp.fetch(url, options);
    } catch (error) {
      if (i === maxRetries - 1) throw error;
      Utilities.sleep(1000 * Math.pow(2, i)); // exponential backoff
    }
  }
}

/** ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ */
function main() {
  try {
    const airData = fetchAirQualityData();
    importDataToSpreadsheet(airData);
    const message = createMessage(airData);
    sendLineNotification(message);
    Logger.log('Air quality monitoring completed successfully');
  } catch (error) {
    handleError(error);
  }
}

/** ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å API */ 
function fetchAirQualityData() {
  try {
    const thaiResponse = fetchWithRetry(CONFIG.API_ENDPOINTS.THAI_AIR);
    const globalResponse = fetchWithRetry(CONFIG.API_ENDPOINTS.GLOBAL_AIR);
    
    const thaiData = JSON.parse(thaiResponse.getContentText());
    const globalData = JSON.parse(globalResponse.getContentText());
    
    // Validate data
    if (!thaiData || !globalData) {
      throw new Error('Invalid API response');
    }
    
    return {
      thai: thaiData,
      global: globalData
    };
  } catch (error) {
    throw new AirQualityError('Failed to fetch air quality data: ' + error.message, 'API_ERROR');
  }
}

/** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö PM2.5 ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */ 
function getPM25Advice(pm25Value) {
  const levels = CONFIG.PM25_LEVELS;
  let advice = {
    level: '',
    color: '',
    generalAdvice: '',
    riskGroupAdvice: ''
  };

  if (pm25Value >= levels.UNHEALTHY.min) {
    advice = {
      level: '‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      color: levels.UNHEALTHY.color,
      generalAdvice: '‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô PM2.5',
      riskGroupAdvice: '‡∏á‡∏î‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£'
    };
  } else if (pm25Value >= levels.UNHEALTHY_SENSITIVE.min) {
    advice = {
      level: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
      color: levels.UNHEALTHY_SENSITIVE.color,
      generalAdvice: '‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô',
      riskGroupAdvice: '‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô'
    };
  } else if (pm25Value >= levels.MODERATE.min) {
    advice = {
      level: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
      color: levels.MODERATE.color,
      generalAdvice: '‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á',
      riskGroupAdvice: '‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏ô'
    };
  } else if (pm25Value >= levels.GOOD.min) {
    advice = {
      level: '‡∏î‡∏µ',
      color: levels.GOOD.color,
      generalAdvice: '‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥',
      riskGroupAdvice: '‡∏Ñ‡∏ß‡∏£‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á'
    };
  } else {
    advice = {
      level: '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
      color: levels.VERY_GOOD.color,
      generalAdvice: '‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥',
      riskGroupAdvice: '‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥'
    };
  }
  
  return advice;
}

/** ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ */
function formatThaiDateTime(dateTimeStr) {
  const thaiMonths = {
    'January': '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°',
    'February': '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå',
    'March': '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°',
    'April': '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô',
    'May': '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°',
    'June': '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    'July': '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°',
    'August': '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°',
    'September': '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô',
    'October': '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°',
    'November': '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô',
    'December': '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  };

  try {
    const date = new Date(dateTimeStr);
    const formatted = Utilities.formatDate(date, "Asia/Bangkok", "dd-MMMM-yyyy HH:mm:ss");
    return formatted.replace(/(\d+)-(\w+)-(\d+) (\d+:\d+:\d+)/, (match, day, month, year, time) => {
      return `${day} ${thaiMonths[month]} ‡∏û.‡∏®.${parseInt(year) + 543} ‡πÄ‡∏ß‡∏•‡∏≤ ${time}`;
    });
  } catch (error) {
    Logger.log('Error formatting date: ' + error.message);
    return dateTimeStr; // Return original string if formatting fails
  }
}

/** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */
function createMessage(airData) {
  try {
    const { global } = airData;
    if (!global?.data?.iaqi?.pm25?.v) {
      throw new Error('Invalid air quality data structure');
    }

    const pm25Value = global.data.iaqi.pm25.v;
    const advice = getPM25Advice(pm25Value);
    const formattedDateTime = formatThaiDateTime(global.data.time.s);

    const messageText = `
üîî ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
üìÖ ${formattedDateTime}

üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®:
‚Ä¢ AQI(US) = ${global.data.aqi}
‚Ä¢ PM2.5 = ${pm25Value} (Œºg/m¬≥)
‚Ä¢ PM10 = ${global.data.iaqi.pm10.v} (Œºg/m¬≥)
‚Ä¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ = ${global.data.iaqi.t.v}¬∞C

üè• ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${advice.level}

üìù ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:
‚Ä¢ ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ${advice.generalAdvice}
‚Ä¢ ‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ${advice.riskGroupAdvice}

üåê ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: https://aqicn.org/station/@419398
    `.trim();

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('‡∏ä‡∏µ‡∏ï1');
    const chart = sheet?.getCharts()[0];
    const imageBlob = chart ? chart.getBlob().getAs("image/png") : null;

    return {
      message: messageText,
      imageFile: imageBlob
    };
  } catch (error) {
    throw new AirQualityError('Failed to create message: ' + error.message, 'MESSAGE_ERROR');
  }
}

/** ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line Notify */
function sendLineNotification(message) {
  if (!message?.message) {
    throw new AirQualityError('Invalid message object', 'NOTIFICATION_ERROR');
  }

  // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Line Token
  CONFIG.LINE_TOKEN.forEach((token) => {
    const options = {
      "method": 'post',
      "headers": { 
        "Authorization": "Bearer " + token 
      },
      "payload": {
        "message": message.message,
        "imageFile": message.imageFile
      },
      "muteHttpExceptions": true
    };

    try {
      const response = UrlFetchApp.fetch("https://notify-api.line.me/api/notify", options);
      const responseCode = response.getResponseCode();

      if (responseCode !== 200) {
        throw new Error(`Line API returned status code ${responseCode} for token: ${token}`);
      }

      Logger.log(`Line notification sent successfully for token: ${token}`);
    } catch (error) {
      Logger.log(`Failed to send Line notification for token: ${token}. Error: ${error.message}`);
    }
  });
}

/** ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Spreadsheet */
function importDataToSpreadsheet(airData) {
  try {
    const sheet = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID).getSheetByName("‡∏ä‡∏µ‡∏ï1");
    if (!sheet) {
      throw new Error('Sheet not found');
    }

    const { global } = airData;
    if (!global?.data) {
      throw new Error('Invalid air data structure');
    }
    
    // Format date
    const date = new Date(global.data.time.s);
    const dateString = Utilities.formatDate(date, "Asia/Bangkok", "dd/MM/yyyy HH:mm:ss");
    
    // Manage rows (keep only last 7 days of data)
    if (sheet.getLastRow() > 7) {
      sheet.deleteRows(2, 1);
    }
    
    // Add new row with specified data
    sheet.appendRow([
      dateString,            // Timestamp
      global.data.aqi,       // AQI (US)
      global.data.iaqi.pm10.v, // PM10 (¬µg/m¬≥)
      global.data.iaqi.pm25.v  // PM2.5 (¬µg/m¬≥)
    ]);
    
    // Set column headers if not already set
    const headers = sheet.getRange(1, 1, 1, 4).getValues()[0];
    if (!headers[0]) {
      sheet.getRange(1, 1, 1, 4).setValues([
        ['Timestamp', 'AQI (US)', 'PM10 (¬µg/m¬≥)', 'PM2.5 (¬µg/m¬≥)']
      ]);
    }
    
    Logger.log("Data imported successfully to spreadsheet");
  } catch (error) {
    throw new AirQualityError('Failed to import data to spreadsheet: ' + error.message, 'SPREADSHEET_ERROR');
  }
}

/** ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î */
function handleError(error) {
  const errorMessage = `üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`;
  Logger.log(errorMessage);
  
  try {
    sendLineNotification({ message: errorMessage });
  } catch (notifyError) {
    Logger.log('Failed to send error notification: ' + notifyError.message);
  }
}

/** ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 6 ‡πÅ‡∏•‡∏∞ 16 ‡∏ô. */
function createDailyTrigger() {
  // ‡∏•‡∏ö Trigger ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const triggers = ScriptApp.getProjectTriggers();
  for (const trigger of triggers) {
    ScriptApp.deleteTrigger(trigger);
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 6:00 ‡∏ô. (GMT+7)
  ScriptApp.newTrigger('main')
    .timeBased()
    .atHour(6) // ‡πÄ‡∏ß‡∏•‡∏≤ 6 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤
    .everyDays(1) // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
    .create();

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Trigger ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ 16:00 ‡∏ô. (GMT+7)
  ScriptApp.newTrigger('main')
    .timeBased()
    .atHour(16) // ‡πÄ‡∏ß‡∏•‡∏≤ 4 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô
    .everyDays(1) // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
    .create();
}

/** Web App functions */
function doGet() {
  return HtmlService.createTemplateFromFile('index')
    .evaluate()
    .setTitle('Air Quality Widget')
    .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
}
